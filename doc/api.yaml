openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
info:
  title: WASAgram
  description: |-
    This API is for the WASAgram Webapp. 
  version: 1.0.0
tags:
  - name: Users
  - name: Followers
  - name: Banning
  - name: Posts
  - name: Likes
  - name: Comments
  - name: Picture
paths:
  /login:
    post:
      tags: ["Users"]
      operationId: doLogin
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: The userid of the user
              type: object
              properties:
                userId:
                  description: "The userId or uid of the user"
                  type: string
                  pattern: "@[a-zA-z0-9_.]{3,16}"
                  example: "@Alan_Turing"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: The identifier of the user
                type: object
                properties:
                  identifier:
                    type: string
                    pattern: "[a-zA-z0-9-_]{11}"
                    example: "gocwRvLhDf8"
                    minLength: 11
                    maxLength: 11
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /search:
    parameters:
      - $ref: "#/components/parameters/searchString"
      - $ref: "#/components/parameters/queryUserId"
    get:
      tags: ["Users"]
      operationId: doSearch
      summary: Search for a user
      description: |
        Searches for a user.
        The searchstring parameter is the string that should match the searched users userId or name.
        The searching users user Id (uid) must be passed as parameter uid.
        Returns a list of user objects which fit the search parameters ordered by relevance to the searching user.
      responses:
        "200":
          description: |
            A list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{uid}:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      operationId: getUser
      tags: ["Users"]
      summary: Get a users Information
      description: |
        Obtain the userinformation (name, ...) of the user with userId uid
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            The userinformation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{uid}/posts:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/dateTime"
    get:
      tags: ["Users"]
      operationId: getUserProfile
      summary: Get the post from the user with userId uid before the timepoint dateTime
      description: |
        Obtain the latest posts of the user with userId uid in reverse chronological order.
        If the query parameter dateTime is specified only posts before the dateTime will be returned.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            A list of posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contentStream"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{uid}/posts/count:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Users"]
      operationId: getPostCount
      summary: Get the number of posts
      description: |
        Obtain the latest posts of the accounts, the user with userId uid follows in reverse chronological order.
        If the query parameter dateTime is specified only posts before the dateTime will be returned.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Number of created posts
          content:
            application/json:
              schema:
                description: The count of posts
                type: object
                properties:
                  count:
                    description: "The count of posts"
                    type: integer
                    example: 8
                    minimum: 0
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{uid}/stream:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Users"]
      operationId: getMyStream
      summary: Get the stream of a user
      description: |
        Obtain the posts made by accounts which the user with userId uid follows in reverse chronological order.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            A list of posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contentStream"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
 
  /users/{uid}/username:
    parameters:
      - $ref: "#/components/parameters/userId"
    put:
      tags: ["Users"]
      operationId:  setMyUserName
      summary: Change the username
      description: |
        Change the username of a user. 
        Only the user itself can change his username. 
      security:
        - bearerAuth: []
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              description: The new username
              type: object
              properties:
                name:
                  type: string
                  pattern: "[a-zA-z0-9-. ]{1,30}"
                  example: "Konrad Zuse"
                  minLength: 1
                  maxLength: 30
        required: true
      responses:
        "204": { description: Username changed successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{uid}/followed:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Followers"]
      operationId:  getFollowed
      summary: Get all followed accounts
      description: |
        Get a list of all users which the user with userId uid follows.
        Returns a list of user objects and the number of followed users.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            An array of followed users and the number of followed users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{uid}/followed/count:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Followers"]
      operationId: getFollowedCount
      summary: Get the number of followed accounts
      description: |
        Obtain the number of accounts followed by the user with the userId uid
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Number of followed accounts
          content:
            application/json:
              schema:
                description: The count of followed
                type: object
                properties:
                  count:
                    description: "The count of followed"
                    type: integer
                    example: 8
                    minimum: 0
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{uid}/followers:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Followers"]
      operationId: getFollowers
      summary: Get all following accounts
      description: |
        Get a list of all users which follow the user with userId uid.
        Returns a list of user objects and the number of followers.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            An array of following users and the number of following users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{uid}/followers/count:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Followers"]
      operationId: getFollowersCount
      summary: Get the number of following accounts
      description: |
        Obtain the number of accounts following the user with the userId uid
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Number of following accounts
          content:
            application/json:
              schema:
                description: The count of followers
                type: object
                properties:
                  count:
                    description: "The count of followers"
                    type: integer
                    example: 8
                    minimum: 0
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{uid}/followers/{fid}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/followerId"
    put:
      tags: ["Followers"]
      operationId: followUser
      summary: Follow a user
      description: |
        Follow another user.
        The userId (uid) specifies the followed user,
        the followerId (fid) specifies the userId of the user which wants to follow the other user.
        A user can't follow himself.
      security:
        - bearerAuth: []      
      requestBody:
        content:
          application/json:
            schema:
              description: An empty object
              type: object
      responses:
        "204": { description: Followed user successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: No user found}
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Followers"]
      operationId: unfollowUser
      summary: Unfollow a user
      description: |
        Unfollow another user.
        The userId (uid) specifies the followed user,
        the followerId (fid) specifies the userId of the user which wants to unfollow the other user.
      security:
        - bearerAuth: []
      responses:
        "204": { description: Unfollowed user successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /users/{uid}/banned:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Banning"]
      operationId: getBanned
      summary: Get all users which a user banned
      description: |
        Get a list of all users which are banned by the user userId uid.
        Returns a list of user objects and the number of banned users.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            An array of banned users and the number of banned users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
       
  /users/{uid}/banned/count:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["Banning"]
      operationId: getBannedCount
      summary: Get the number of banned accounts
      description: |
        Obtain the number of accounts the user with the userId uid has banned
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Number of banned accounts
          content:
            application/json:
              schema:
                description: The count of banned accounts
                type: object
                properties:
                  count:
                    description: "The count of banned accounts"
                    type: integer
                    example: 8
                    minimum: 0
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{uid}/banned/{bid}:
    parameters:
    - $ref: "#/components/parameters/userId"
    - $ref: "#/components/parameters/bannedId"
    put:
      tags: ["Banning"]
      operationId: banUser
      summary: Ban a user
      description: |
        Ban another user.
        The userId (uid) specifies the the banning user, 
        the bannedId (bid) specifies the userId of the user which gets banned.
        A user can't ban himself.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              description: An empty object
              type: object
      responses:
        "204": { description: Banned user successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Banning"]
      operationId: unbanUser
      summary: Unban a user
      description: |
        Unban another user.
        The userId (uid) specifies the the banning user, 
        the bannedId (bid) specifies the userId of the user which gets unbanned.
      security:
        - bearerAuth: []
      responses:
        "204": { description: Unbanned user successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /posts:
    post:
      tags: ["Posts"]
      operationId: uploadPhoto
      summary: Create a new post
      description: |
        Post a foto with caption to a users account. 
        The posted foto will then appear on the profile of the user and in the streams of his followers.
      security:
        - bearerAuth: []
      requestBody:
        description: "New post with image"
        content:
          multipart/form-data:
            schema:
              description: The posts metadata together with the post itself
              allOf:
                - $ref: "#/components/schemas/postWrapper"
                - type: object
                  properties:
                    image:
                      type: string
                      format: binary
                      minLength: 1
                      maxLength: 100000000
        required: true
      responses:
        "201":
          description: The postId (pid) of the new post
          content:
            application/json:
              schema:
                description: The postId (id) of the new post
                type: object
                properties:
                  postId:
                    type: string
                    pattern: "[a-zA-z0-9-_]{11}"
                    example: "gocwRvLhDf8"
                    minLength: 11
                    maxLength: 11
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /posts/{pid}:
    parameters:
      - $ref: "#/components/parameters/postId"
    get:
      tags: ["Posts"]
      operationId: getPost
      summary: Get a Post
      description: |
        Returns the metadata of the post with postId pid. 
        The posts picture can be obtained via the GET /picture/{pid} API call 
        with the pictureId from this calls response.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            The posts metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
    delete:
      tags: ["Posts"]
      operationId: deletePhoto
      summary: Delete a Post
      description: |
        Remove a post from a users account. 
        The postId specifies the post.
      security:
        - bearerAuth: []
      responses:
        "204": { description: Post deleted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /posts/{pid}/likes:
    parameters:
      - $ref: "#/components/parameters/postId"
    get:
      tags: ["Likes"]
      operationId: getLikes
      summary: Get the users that liked a post
      description: |
        Get a list of all users which liked the post with postId pid.
        Returns a list of user objects and the number of likes.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            An array of users which liked the post and the number of likes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
               
  /posts/{pid}/likes/count:
    parameters:
      - $ref: "#/components/parameters/postId"
    get:
      tags: ["Likes"]
      operationId: getLikeCount
      summary: Get the number of likes 
      description: |
        Obtain the number of likes the post with the postId pid has
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Number of likes
          content:
            application/json:
              schema:
                description: The count of likes
                type: object
                properties:
                  count:
                    description: "The count of likes"
                    type: integer
                    example: 8
                    minimum: 0
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /posts/{pid}/likes/{uid}:
    parameters:
      - $ref: "#/components/parameters/postId"
      - $ref: "#/components/parameters/userId"
    put:
      tags: ["Likes"]
      operationId: likePhoto
      summary: Like a Post
      description: |
        Like a post from another users account. 
        The postId (pid) specifies the post from the users account, the userId (uid) the liking user.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              description: An empty object
              type: object
      responses:
        "204": { description: Post liked successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Likes"]
      operationId: unlikePhoto
      summary: Unlike a Post
      description: |
        Remove a like from another users post. 
        The postId (pid) specifies the post from the users account, the userId (uid) the unliking user.
      security:
        - bearerAuth: []
      responses:
        "204": { description: Post unliked successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /posts/{pid}/comments:
    parameters:
      - $ref: "#/components/parameters/postId"
    post:
      tags: ["Comments"]
      operationId: commentPhoto
      summary: Comment a post
      description: |
        Comment a post from another users account. 
        The postId (pid) specifies the post.
      security:
        - bearerAuth: []
      requestBody:
        description: | 
            An array of comments and the number of comments made.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/comment"
      responses:
        "201":
          description:
            The commentId (cid) of the new comment
          content:
            application/json:
              schema:
                description: The commentId (cid) of the new comment
                type: object
                properties:
                  commentId:
                    type: string
                    pattern: "[a-zA-z0-9-_]{11}"
                    example: "gocwRvLhDf8"
                    readOnly: true
                    minLength: 11
                    maxLength: 11
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      tags: ["Comments"]
      operationId: getComments
      summary: Get the commments of a post
      description: |
        Get a list of all comments made on the post with postId pid.
        Returns a list of comment objects and the number of comments.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            A list of comments and the number of comments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commentlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /posts/{pid}/comments/count:
    parameters:
      - $ref: "#/components/parameters/postId"
    get:
      tags: ["Comments"]
      operationId: getCommentCount
      summary: Get the number of comments
      description: |
        Obtain the number of comments the post with the postId pid has
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Number of comments
          content:
            application/json:
              schema:
                description: The count of comments
                type: object
                properties:
                  count:
                    description: "The count of comments"
                    type: integer
                    example: 8
                    minimum: 0
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /posts/{pid}/comments/{cid}:
    parameters:
      - $ref: "#/components/parameters/postId"
      - $ref: "#/components/parameters/commentId"
    delete:
      tags: ["Comments"]
      operationId: uncommentPhoto
      summary: Uncomment a Post
      description: |
        Delete a previously made comment from a post.
        The postId (pid) specifies the post, the commentId (cid) specifies the id of the comment.
      security:
        - bearerAuth: []
      responses:
        "204": { description: Comment delted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /pictures/{pid}:
    parameters:
      - $ref: "#/components/parameters/pictureId"
    get:
      tags: ["Picture"]
      operationId: getPicture
      summary: Get the picture of a Post
      description: |
        Get the picture with the pictureId pid.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            A png image
          content:
            image/png:
              schema:
                description: The picture in png format
                type: string
                format: binary
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Picture not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
                  
components:
  parameters:
    userId:
      schema:
        type: string
        pattern: "@[a-zA-z0-9_.]{3,16}"
        example: "@Alan_Turing"
        minLength: 3
        maxLength: 16
      name: uid
      in: path
      required: true
      description: The userId (uid) is a string, that uniquely identifies a user.
    followerId:
      schema:
        type: string
        pattern: "@[a-zA-z0-9_.]{3,16}"
        example: "@Konrad_Zuse"
        readOnly: true
        minLength: 3
        maxLength: 16
      name: fid
      in: path
      required: true
      description: The followerId (fid) is the userId (uid) of the follower.
    bannedId:
      schema:
        type: string
        pattern: "@[a-zA-z0-9_.]{3,16}"
        example: "@John_Backus"
        readOnly: true
        minLength: 3
        maxLength: 16
      name: bid
      in: path
      required: true
      description: The bannedId (bid) is the userId (uid) of the banned user.
    postId:
      schema:
        type: string
        pattern: "[a-zA-z0-9-_]{11}"
        example: "gocwRvLhDf8"
        readOnly: true
        minLength: 11
        maxLength: 11
      name: pid
      in: path
      required: true
      description: The postId (pid) is a string, that uniquely identifies a post.
    commentId:
      schema:
        type: string
        pattern: "[a-zA-z0-9-_]{11}"
        example: "gocwRvLhDf8"
        readOnly: true
        minLength: 11
        maxLength: 11
      name: cid
      in: path
      required: true
      description: The commentId (cid) is a string, thath uniquely identifies a comment.
    pictureId:
      schema:
        type: string
        pattern: "[a-zA-z0-9-_]{11}"
        example: "gocwRvLhDf8"
        readOnly: true
        minLength: 11
        maxLength: 11
      name: pid
      in: path
      required: true
      description: The pictureId (pid) is a string, that uniquely identifies the picture of a post.
    searchString:
      schema:
        type: string
        pattern: "[@a-zA-z0-9-_]{1,30}"
        example: "Alan_Turing"
        readOnly: true
        minLength: 1
        maxLength: 30
      name: searchString
      in: query
      required: true
      description: The searchString is a part of either the searched users user id or name
    queryUserId:
      schema:
        type: string
        pattern: "@[a-zA-z0-9_.]{3,16}"
        example: "@Alan_Turing"
        minLength: 3
        maxLength: 16
      name: uid
      in: query
      required: true
      description: The userId (uid) of the searching user
    dateTime:
      schema:
        type: string
        pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}"
        example: "2000-09-11 11:59:37"
        readOnly: true
        minLength: 19
        maxLength: 19
      name: dateTime
      in: query
      required: false
      description: DateTime are a date and a time which describe a point in time.
  
  schemas:
    user:
      type: object
      description: "A user"
      properties:
        userId:
          description: "The id of the user"
          type: string
          pattern: "@[a-zA-z0-9_.]{3,16}"
          example: "@Alan_Turing"
          minLength: 3
          maxLength: 16
        name:
          description: "The name of the user"
          type: string
          pattern: "[a-zA-z0-9-. ]{1,30}"
          example: "Alan Turing"
          minLength: 1
          maxLength: 30
        posts:
          description: "The number of posts from the user"
          type: integer
          example: 57
          minimum: 0
        followers:
          description: "The number of followers"
          type: integer
          example: 15400
          minimum: 0
        followed:
          description: "The number of followed accounts"
          type: integer
          example: 530
          minimum: 0
    userlist:
      description: "A list of users"
      type: object
      properties:
        length:
          description: "The amount of users the list would have (can exceed maxItems)"
          type: integer
          example: 8
          minimum: 0
        list:
          description: "The list of users"
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: "#/components/schemas/user"
    post:
      type: object
      description: "The metadata of a post containing the pictureId (pid)"
      properties:
        postId:
          description: "The id of the post"
          type: string
          pattern: "[a-zA-z0-9-_]{11}"
          example: "gocwRvLhDf8"
          minLength: 11
          maxLength: 11
        userId:
          description: "The userId of the poster"
          type: string
          pattern: "@[a-zA-z0-9_.]{3,16}"
          example: "@Alan_Turing"
          minLength: 3
          maxLength: 16
        username:
          description: "The username of the poster"
          type: string
          pattern: "[a-zA-z0-9-. ]{1,30}"
          example: "Alan Turing"
          minLength: 1
          maxLength: 30
        date-time:
          description: "The time of the posts creation"
          type: string
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}"
          example: "2000-09-11 11:59:37"
          minLength: 19
          maxLength: 19
        caption:
          description: "The list of comments"
          type: string
          pattern: "x*"
          example: "Nice day at the beach."
          minLength: 1
          maxLength: 140
        pictureId:
          description: "The pictureId of the posts picture"
          type: string
          pattern: "[a-zA-z0-9-_]{11}"
          example: "gocwRvLhDf8"
          minLength: 11
          maxLength: 11
        likes:
          description: "The number of likes"
          type: integer
          example: 14
          minimum: 0
        comments:
          description: "The number of comments"
          type: integer
          example: 3
          minimum: 0
    postWrapper:
      description: "Wraps a post object for it to appear correctly in multipart/form-data"
      type: object
      properties:
        post:
          $ref: "#/components/schemas/post"
    contentStream:
      description: "An array of posts"
      type: array
      minItems: 1
      maxItems: 12
      items:
        $ref: "#/components/schemas/post" 
    comment:
      description: "A comment made on a post"
      type: object
      properties:
        commentId:
          description: "The id of the comment"
          type: string
          pattern: "[a-zA-z0-9-_]{11}"
          example: "gocwRvLhDf8"
          minLength: 11
          maxLength: 11
        postId:
          description: "The postId of the comments post"
          type: string
          pattern: "[a-zA-z0-9-_]{11}"
          example: "gocwRvLhDf8"
          minLength: 11
          maxLength: 11
        userId:
          description: "The userId of the poster"
          type: string
          pattern: "@[a-zA-z0-9_.]{3,16}"
          example: "@Alan_Turing"
          minLength: 3
          maxLength: 16
        username:
          description: "The username of the poster"
          type: string
          pattern: "[a-zA-z0-9-. ]{1,30}"
          example: "Alan Turing"
          minLength: 1
          maxLength: 30
        date-time:
          description: "The time of the comments upload"
          type: string
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}"
          example: "2000-09-11 11:59:37"
          minLength: 19
          maxLength: 19
        comment:
          description: "The comments itself"
          type: string
          pattern: "x*"
          example: "Looks nice!"
          minLength: 1
          maxLength: 140
    commentlist:
      description: "A list of comments"
      type: object
      properties:
        length:
          description: "The amount of comments the post has"
          type: integer
          example: 3
          minimum: 0
        list:
          description: "The list of comments"
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: "#/components/schemas/comment"
        
  responses:
    BadRequest:
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    UnauthorizedRequest:
      description: |-
        The requesting party was not authorized to access the resource.
    InternalServerError:
      description: |-
        The server encountered an internal error.
        Further info in server logs. 
        comment:
          type: string
          
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer