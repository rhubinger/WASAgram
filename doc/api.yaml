openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
info:
  title: WASAgram
  description: |-
    This API is for the WASAgram Webapp. 
  version: 1.0.0
tags:
  - name: Login
  - name: User
  - name: Fotos
  - name: Picture
paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Alan Turing"
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "qlzf1964sdlk"
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{uid}/username:
    parameters:
      - $ref: "#/components/parameters/userId"
    put:
      tags: ["User"]
      summary: Change the username
      description: |
        Change the username of a user. 
        Only the user itself can change his username. 
      security:
        - bearerAuth: []
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Alan Turing"
                  pattern: "ˆ.*?$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200": { description: Username changed successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /user/{uid}/followed:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["User"]
      summary: Get all accounts which are followed by a user
      description: |
        Get a list of all users which the user with userId uid follows.
        Returns a list of user objects and the number of followed users.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            An array of followed users and the number of followed users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
                  
  /user/{uid}/followers:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["User"]
      summary: Get all accounts which follow a user
      description: |
        Get a list of all users which follow the user with userId uid.
        Returns a list of user objects and the number of followers.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            An array of following users and the number of following users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
                  
  /user/{uid}/followers/{fid}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/followerId"
    post:
      tags: ["User"]
      summary: Follow a user
      description: |
        Follow another user.
        The userId (uid) specifies the followed user,
        the followerId (fid) specifies the userId of the user which wants to follow the other user.
      security:
        - bearerAuth: []
      responses:
        "200": { description: Followed user successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: No user found}
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["User"]
      summary: Unfollow a user
      description: |
        Unfollow another user.
        The userId (uid) specifies the followed user,
        the followerId (fid) specifies the userId of the user which wants to unfollow the other user.
      security:
        - bearerAuth: []
      responses:
        "200": { description: Unfollowed user successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /user/{uid}/banned/{bid}:
    parameters:
    - $ref: "#/components/parameters/userId"
    - $ref: "#/components/parameters/bannedId"
    post:
      tags: ["User"]
      summary: Ban a user
      description: |
        Ban another user.
        The userId (uid) specifies the the banning user, 
        the bannedId (bid) specifies the userId of the user which gets banned.
      security:
        - bearerAuth: []
      responses:
        "200": { description: Banned user successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["User"]
      summary: Unban a user
      description: |
        Unban another user.
        The userId (uid) specifies the the banning user, 
        the bannedId (bid) specifies the userId of the user which gets unbanned.
      security:
        - bearerAuth: []
      responses:
        "200": { description: Unbanned user successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /user/{uid}/banned:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["User"]
      summary: Get all users which a user banned
      description: |
        Get a list of all users which are banned by the user userId uid.
        Returns a list of user objects and the number of banned users.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            An array of banned users and the number of banned users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
                  
  /user/{uid}:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["User"]
      summary: Get a users profile data
      description: |
        Obtain the userinformation (name, ...) and posts (in reversec chronological order) of the user with userId uid.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            The userinformation and a list of posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /user/{uid}/stream:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["User"]
      summary: Get the stream of a user
      description: |
        Obtain the posts made by accounts which the user with userId uid follows in reverse chronological order.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            A list of posts in reverse chronological order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stream"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /posts:
    put:
      tags: ["Fotos"]
      summary: Create a new post
      description: |
        Post a foto with caption to a users account. 
        The posted foto will then appear on the profile of the user and in the streams of his followers.
      security:
        - bearerAuth: []
      requestBody:
        description: "New post with image"
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/post"
                - type: object
                  properties:
                    image:
                      type: string
                      format: binary
        required: true
      responses:
        "200":
          description: |
            The postId (pid) of the new post
          content:
            application/json:
              schema:
                type: string
                example: "dkgo2953dleo"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /posts/{pid}:
    parameters:
      - $ref: "#/components/parameters/postId"
    get:
      tags: ["Fotos"]
      summary: Get a Foto
      description: |
        Returns the metadata of the post with postId pid. 
        The posts picture can be obtained via the GET /picture/{pid} API call 
        with the pictureId from this calls response.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            The posts metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/post"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
    delete:
      tags: ["Fotos"]
      summary: Delete a Post
      description: |
        Remove a post from a users account. 
        The postId specifies the post.
      security:
        - bearerAuth: []
      responses:
        "200": { description: Post deleted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /posts/{pid}/likes:
    parameters:
      - $ref: "#/components/parameters/postId"
    get:
      tags: ["Fotos"]
      summary: Get the users that liked a foto
      description: |
        Get a list of all users which liked the post with postId pid.
        Returns a list of user objects and the number of likes.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            An array of users which liked the post and the number of likes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/userlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
                  
  /posts/{pid}/likes/{lid}:
    parameters:
      - $ref: "#/components/parameters/postId"
      - $ref: "#/components/parameters/likeId"
    post:
      tags: ["Fotos"]
      summary: Like a Foto
      description: |
        Like a post from another users account. 
        The postId (pid) specifies the post from the users account, the likeId (lid) is the userId of the liking user.
      security:
        - bearerAuth: []
      responses:
        "200": { description: Post liked successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Fotos"]
      summary: Unlike a Foto
      description: |
        Remove a like from another users foto. 
        The postId (pid) specifies the foto from the users account, the likeId (lid) is the userId of the unliking user.
      security:
        - bearerAuth: []
      responses:
        "200": { description: Post unliked successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /posts/{pid}/comments:
    parameters:
      - $ref: "#/components/parameters/postId"
    put:
      tags: ["Fotos"]
      summary: Comment a post
      description: |
        Comment a post from another users account. 
        The postId (pid) specifies the post.
      security:
        - bearerAuth: []
      requestBody:
        description: | 
            An array of comments and the number of comments made.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/comment"
      responses:
        "200": { description: Comment created successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      tags: ["Fotos"]
      summary: Get the commments of a post
      description: |
        Get a list of all comments made on the post with postId pid.
        Returns a list of comment objects and the number of comments.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            A list of comments and the number of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/commentlist"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /posts/{pid}/comments/{cid}:
    parameters:
      - $ref: "#/components/parameters/postId"
      - $ref: "#/components/parameters/commentId"
    delete:
      tags: ["Fotos"]
      summary: Uncomment a Foto
      description: |
        Delete a previously made comment from a post.
        The postId (pid) specifies the post, the commentId (cid) specifies the id of the comment.
      security:
        - bearerAuth: []
      responses:
        "200": { description: Comment delted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Resource not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /picture/{pid}:
    parameters:
      - $ref: "#/components/parameters/pictureId"
    get:
      tags: ["Picture"]
      summary: Get the picture of a Post
      description: |
        Get the picture with the pictureId pid.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            A png image
          content:
            image/png:
              schema:
                type: string
                format: binary
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "404": { description: Picture not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
                  
components:
  parameters:
    userId:
      schema:
        type: string
        example: "qlzf1964sdlk"
        readOnly: true
      name: uid
      in: path
      required: true
      description: The userId (uid) is a string, that uniquely identifies a user.
    followerId:
      schema:
        type: string
        example: "qlfj5037flng"
        readOnly: true
      name: fid
      in: path
      required: true
      description: The followerId (fid) is the userId (uid) of the follower.
    bannedId:
      schema:
        type: string
        example: "eolg4078rngk"
        readOnly: true
      name: bid
      in: path
      required: true
      description: The bannedId (bid) is the userId (uid) of the banned user.
    postId:
      schema:
        type: string
        example: "qlvh1857rovh"
        readOnly: true
      name: pid
      in: path
      required: true
      description: The postId (pid) is a string, that uniquely identifies a post.
    likeId:
      schema:
        type: string
        example: "dpvk1047dovl"
        readOnly: true
      name: lid
      in: path
      required: true
      description: The likeId (lid) is the userId (uid) of the user that liked the post.
    commentId:
      schema:
        type: string
        example: "dpvk2047fpwv"
        readOnly: true
      name: cid
      in: path
      required: true
      description: The commentId (cid) is a string, thath uniquely identifies a comment.
    pictureId:
      schema:
        type: string
        example: "qlvh1857rovh"
        readOnly: true
      name: pid
      in: path
      required: true
      description: The pictureId (pid) is a string, that uniquely identifies the picture of a post.
        
  schemas:
    user:
      type: object
      properties:
        userId:
          type: string
          example: "dltk4078glfj"
        name:
          type: string
          example: "KonradZuse"
        followers:
          type: integer
          example: 15400
          minimum: 0
        followed:
          type: integer
          example: 530
          minimum: 0
    stream:
      type: array
      items: 
        $ref: "#/components/schemas/post"    
    profile:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/user"
        posts:
          type: array
          items: 
            $ref: "#/components/schemas/post"
    post:
      type: object
      properties:
        poster:
          $ref: "#/components/schemas/user"
        date-time:
          type: string
          format: date-time
        caption:
          type: string
          example: "Nice day at the beach."
          minLength: 1
          maxLength: 140
        pictureId:
          type: string
          example: "qlvh1857rovh"
        likes:
          type: integer
          example: 14
          minimum: 0
        comments:
          type: integer
          example: 3
          minimum: 0
    userlist:
      type: object
      properties:
        length:
          type: integer
          example: 8
          minimum: 0
        list:
          type: array
          items:
            $ref: "#/components/schemas/user"
    comment:
      type: object
      properties:
        poster:
          $ref: "#/components/schemas/user"
        fotoId:
          type: string
          example: "qlzf1964sdlk"
        date-time:
          type: string
          format: date-time
        comment:
          type: string
          example: "Looks nice!"
          minLength: 1
          maxLength: 140
          
    commentlist:
      type: object
      properties:
        length:
          type: integer
          example: 3
          minimum: 0
        list:
          type: array
          items:
            $ref: "#/components/schemas/comment"
        
  responses:
    BadRequest:
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    UnauthorizedRequest:
      description: |-
        The requesting party was not authorized to access the resource.
    InternalServerError:
      description: |-
        The server encountered an internal error.
        Further info in server logs. 
        comment:
          type: string
          
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer